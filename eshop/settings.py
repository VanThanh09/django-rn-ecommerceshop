"""
Django settings for eshop project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-qv15!%6vr*)g@+b5^)kfcu391hc6e3t#g7uy%c)ks1b7g7w3-p'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # applications
    'eshopapis.apps.EshopapisConfig',

    # other framework
    'rest_framework',  # Django REST Framework - used for building robust RESTful APIs
    'drf_yasg',  # Yet Another Swagger Generator, generates interactive Swagger documentation for the API
    'oauth2_provider',  # OAuth2 Provider - enables OAuth2 authentication for securing API access
    # django-allauth - handles user authentication, registration, and social logins (Google, Facebook)
    'allauth',  # Core của allauth
    'allauth.account',  # Xác thực qua email/password
    'allauth.socialaccount',  # Kịch hoạt đăng nhập mạng xã hội
    'allauth.socialaccount.providers.google',  # Đăng nhập bằng gg
    'allauth.socialaccount.providers.facebook',  # đăng nhập bằng fb

]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    ]
}

OAUTH2_PROVIDER = {
    'DEFAULT_AUTHENTICATION_CLASSES': ('oauth2_provider.contrib.rest_framework.OAuth2Authentication',)
}

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        'APP': {
            'client_id': '845623906398-asd5ud30cpg573vroa0b28at336eiakk.apps.googleusercontent.com',
            'secret': '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',
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
    }
}

LOGIN_REDIRECT_URL = '/accounts/google/login/'
LOGOUT_REDIRECT_URL = '/accounts/google/login/'

import cloudinary.uploader

# Configuration
cloudinary.config(
    cloud_name="drzc4fmxb",
    api_key="422829951512966",
    api_secret="ILJ11vG7Q7OqbjxyhWS1lNJMN5U",  # Click 'View API Keys' above to copy your API secret
    secure=True
)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Add the account middleware:
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = 'eshop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to log in by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'eshop.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

import pymysql

pymysql.install_as_MySQLdb()

AUTH_USER_MODEL = 'eshopapis.User'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'lulushop',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': '',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CLIENT_ID = 'eB5z6lDf1lWumxja2xtM17UjBc6t7FgK1lKnFrpB'

CLIENT_SECRET = 'TJrWcqQOAI8hbJo5PJCPRvokfuwC2LOrhLiRFGjWppG2NA3qF4CwOy1RVZJPKEmF1pSdpPRTifgk4FyjVRk7PdQ7pn03E8eHMRcZ6opeYBxEnTg31Rfwbnr1MXOPG9oN'
